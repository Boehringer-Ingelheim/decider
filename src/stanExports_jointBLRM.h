// Generated by rstantools.  Do not edit by hand.

/*
    decider is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    decider is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with decider.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_jointBLRM_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_jointBLRM");
    reader.add_event(250, 248, "end", "model_jointBLRM");
    return reader;
}
template <typename T0__, typename T1__>
int
count_n_mono(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& dose_1,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& dose_2,
                 const int& n_obs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 15;
        int res(0);
        (void) res;  // dummy to suppress unused var warning
        stan::math::fill(res, std::numeric_limits<int>::min());
        stan::math::assign(res,0);
        current_statement_begin__ = 16;
        for (int i = 1; i <= n_obs; ++i) {
            current_statement_begin__ = 17;
            if (as_bool((primitive_value(logical_gt(get_base1(dose_1, i, "dose_1", 1), 0)) && primitive_value(logical_eq(get_base1(dose_2, i, "dose_2", 1), 0))))) {
                current_statement_begin__ = 18;
                stan::math::assign(res, (res + 1));
            }
        }
        current_statement_begin__ = 21;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct count_n_mono_functor__ {
    template <typename T0__, typename T1__>
        int
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& dose_1,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& dose_2,
                 const int& n_obs, std::ostream* pstream__) const {
        return count_n_mono(dose_1, dose_2, n_obs, pstream__);
    }
};
template <typename T0__, typename T1__>
std::vector<std::vector<int> >
sort_idx(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& dose_1,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& dose_2,
             const int& n_obs,
             const int& n_obs1,
             const int& n_obs2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 33;
        validate_non_negative_index("res", "2", 2);
        validate_non_negative_index("res", "n_obs", n_obs);
        std::vector<std::vector<int  >  > res(2, std::vector<int>(n_obs, int(0)));
        stan::math::fill(res, std::numeric_limits<int>::min());
        stan::math::assign(res,rep_array(0, 2, n_obs));
        current_statement_begin__ = 35;
        int cnt1(0);
        (void) cnt1;  // dummy to suppress unused var warning
        stan::math::fill(cnt1, std::numeric_limits<int>::min());
        stan::math::assign(cnt1,0);
        current_statement_begin__ = 36;
        int cnt2(0);
        (void) cnt2;  // dummy to suppress unused var warning
        stan::math::fill(cnt2, std::numeric_limits<int>::min());
        stan::math::assign(cnt2,0);
        current_statement_begin__ = 37;
        int cnt(0);
        (void) cnt;  // dummy to suppress unused var warning
        stan::math::fill(cnt, std::numeric_limits<int>::min());
        stan::math::assign(cnt,0);
        current_statement_begin__ = 39;
        for (int i = 1; i <= n_obs; ++i) {
            current_statement_begin__ = 40;
            if (as_bool((primitive_value(logical_gt(get_base1(dose_1, i, "dose_1", 1), 0)) && primitive_value(logical_eq(get_base1(dose_2, i, "dose_2", 1), 0))))) {
                current_statement_begin__ = 41;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((cnt1 + 1)), stan::model::nil_index_list())), 
                            i, 
                            "assigning variable res");
                current_statement_begin__ = 42;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (cnt1 + 1), 
                            "assigning variable res");
                current_statement_begin__ = 43;
                stan::math::assign(cnt1, (cnt1 + 1));
            } else if (as_bool((primitive_value(logical_eq(get_base1(dose_1, i, "dose_1", 1), 0)) && primitive_value(logical_gt(get_base1(dose_2, i, "dose_2", 1), 0))))) {
                current_statement_begin__ = 45;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(((n_obs1 + 1) + cnt2)), stan::model::nil_index_list())), 
                            i, 
                            "assigning variable res");
                current_statement_begin__ = 46;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            ((n_obs1 + 1) + cnt2), 
                            "assigning variable res");
                current_statement_begin__ = 47;
                stan::math::assign(cnt2, (cnt2 + 1));
            } else if (as_bool((primitive_value(logical_gt(get_base1(dose_1, i, "dose_1", 1), 0)) && primitive_value(logical_gt(get_base1(dose_2, i, "dose_2", 1), 0))))) {
                current_statement_begin__ = 49;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni((((n_obs1 + n_obs2) + 1) + cnt)), stan::model::nil_index_list())), 
                            i, 
                            "assigning variable res");
                current_statement_begin__ = 50;
                stan::model::assign(res, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (((n_obs1 + n_obs2) + 1) + cnt), 
                            "assigning variable res");
                current_statement_begin__ = 51;
                stan::math::assign(cnt, (cnt + 1));
            }
        }
        current_statement_begin__ = 54;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sort_idx_functor__ {
    template <typename T0__, typename T1__>
        std::vector<std::vector<int> >
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& dose_1,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& dose_2,
             const int& n_obs,
             const int& n_obs1,
             const int& n_obs2, std::ostream* pstream__) const {
        return sort_idx(dose_1, dose_2, n_obs, n_obs1, n_obs2, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_jointBLRM
  : public stan::model::model_base_crtp<model_jointBLRM> {
private:
        int n_obs;
        int n_studies;
        std::vector<int> n;
        std::vector<int> r;
        std::vector<int> s;
        int doMAP;
        int saturating;
        vector_d dose_c;
        vector_d dose_1;
        vector_d dose_2;
        vector_d mean_tau;
        vector_d sd_tau;
        vector_d mean_mu;
        vector_d sd_mu;
        int num_s;
        int n_obs1;
        int n_obs2;
        std::vector<std::vector<int> > srt_idx;
        std::vector<int> n_srt;
        std::vector<int> r_srt;
        std::vector<int> s_srt;
        vector_d dose_1_srt;
        vector_d dose_2_srt;
        vector_d ldose_1_srt;
        vector_d ldose_2_srt;
public:
    model_jointBLRM(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_jointBLRM(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_jointBLRM_namespace::model_jointBLRM";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_obs", n_obs, 0);
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "n_studies", "int", context__.to_vec());
            n_studies = int(0);
            vals_i__ = context__.vals_i("n_studies");
            pos__ = 0;
            n_studies = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_studies", n_studies, 0);
            current_statement_begin__ = 66;
            validate_non_negative_index("n", "n_obs", n_obs);
            context__.validate_dims("data initialization", "n", "int", context__.to_vec(n_obs));
            n = std::vector<int>(n_obs, int(0));
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            size_t n_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < n_k_0_max__; ++k_0__) {
                n[k_0__] = vals_i__[pos__++];
            }
            size_t n_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < n_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n[i_0__]", n[i_0__], 0);
            }
            current_statement_begin__ = 68;
            validate_non_negative_index("r", "n_obs", n_obs);
            context__.validate_dims("data initialization", "r", "int", context__.to_vec(n_obs));
            r = std::vector<int>(n_obs, int(0));
            vals_i__ = context__.vals_i("r");
            pos__ = 0;
            size_t r_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
                r[k_0__] = vals_i__[pos__++];
            }
            size_t r_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < r_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "r[i_0__]", r[i_0__], 0);
            }
            current_statement_begin__ = 70;
            validate_non_negative_index("s", "n_obs", n_obs);
            context__.validate_dims("data initialization", "s", "int", context__.to_vec(n_obs));
            s = std::vector<int>(n_obs, int(0));
            vals_i__ = context__.vals_i("s");
            pos__ = 0;
            size_t s_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < s_k_0_max__; ++k_0__) {
                s[k_0__] = vals_i__[pos__++];
            }
            size_t s_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < s_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "s[i_0__]", s[i_0__], 1);
            }
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "doMAP", "int", context__.to_vec());
            doMAP = int(0);
            vals_i__ = context__.vals_i("doMAP");
            pos__ = 0;
            doMAP = vals_i__[pos__++];
            check_greater_or_equal(function__, "doMAP", doMAP, 0);
            check_less_or_equal(function__, "doMAP", doMAP, 1);
            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "saturating", "int", context__.to_vec());
            saturating = int(0);
            vals_i__ = context__.vals_i("saturating");
            pos__ = 0;
            saturating = vals_i__[pos__++];
            check_greater_or_equal(function__, "saturating", saturating, 0);
            check_less_or_equal(function__, "saturating", saturating, 1);
            current_statement_begin__ = 77;
            validate_non_negative_index("dose_c", "2", 2);
            context__.validate_dims("data initialization", "dose_c", "vector_d", context__.to_vec(2));
            dose_c = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("dose_c");
            pos__ = 0;
            size_t dose_c_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < dose_c_j_1_max__; ++j_1__) {
                dose_c(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "dose_c", dose_c, 0);
            current_statement_begin__ = 79;
            validate_non_negative_index("dose_1", "n_obs", n_obs);
            context__.validate_dims("data initialization", "dose_1", "vector_d", context__.to_vec(n_obs));
            dose_1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            vals_r__ = context__.vals_r("dose_1");
            pos__ = 0;
            size_t dose_1_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < dose_1_j_1_max__; ++j_1__) {
                dose_1(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "dose_1", dose_1, 0);
            current_statement_begin__ = 80;
            validate_non_negative_index("dose_2", "n_obs", n_obs);
            context__.validate_dims("data initialization", "dose_2", "vector_d", context__.to_vec(n_obs));
            dose_2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            vals_r__ = context__.vals_r("dose_2");
            pos__ = 0;
            size_t dose_2_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < dose_2_j_1_max__; ++j_1__) {
                dose_2(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "dose_2", dose_2, 0);
            current_statement_begin__ = 88;
            validate_non_negative_index("mean_tau", "5", 5);
            context__.validate_dims("data initialization", "mean_tau", "vector_d", context__.to_vec(5));
            mean_tau = Eigen::Matrix<double, Eigen::Dynamic, 1>(5);
            vals_r__ = context__.vals_r("mean_tau");
            pos__ = 0;
            size_t mean_tau_j_1_max__ = 5;
            for (size_t j_1__ = 0; j_1__ < mean_tau_j_1_max__; ++j_1__) {
                mean_tau(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 90;
            validate_non_negative_index("sd_tau", "5", 5);
            context__.validate_dims("data initialization", "sd_tau", "vector_d", context__.to_vec(5));
            sd_tau = Eigen::Matrix<double, Eigen::Dynamic, 1>(5);
            vals_r__ = context__.vals_r("sd_tau");
            pos__ = 0;
            size_t sd_tau_j_1_max__ = 5;
            for (size_t j_1__ = 0; j_1__ < sd_tau_j_1_max__; ++j_1__) {
                sd_tau(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sd_tau", sd_tau, 0);
            current_statement_begin__ = 92;
            validate_non_negative_index("mean_mu", "5", 5);
            context__.validate_dims("data initialization", "mean_mu", "vector_d", context__.to_vec(5));
            mean_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(5);
            vals_r__ = context__.vals_r("mean_mu");
            pos__ = 0;
            size_t mean_mu_j_1_max__ = 5;
            for (size_t j_1__ = 0; j_1__ < mean_mu_j_1_max__; ++j_1__) {
                mean_mu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 94;
            validate_non_negative_index("sd_mu", "5", 5);
            context__.validate_dims("data initialization", "sd_mu", "vector_d", context__.to_vec(5));
            sd_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(5);
            vals_r__ = context__.vals_r("sd_mu");
            pos__ = 0;
            size_t sd_mu_j_1_max__ = 5;
            for (size_t j_1__ = 0; j_1__ < sd_mu_j_1_max__; ++j_1__) {
                sd_mu(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sd_mu", sd_mu, 0);
            // initialize transformed data variables
            current_statement_begin__ = 99;
            num_s = int(0);
            stan::math::fill(num_s, std::numeric_limits<int>::min());
            stan::math::assign(num_s,(doMAP ? (n_studies + 1) : n_studies ));
            current_statement_begin__ = 101;
            n_obs1 = int(0);
            stan::math::fill(n_obs1, std::numeric_limits<int>::min());
            stan::math::assign(n_obs1,count_n_mono(dose_1, dose_2, n_obs, pstream__));
            current_statement_begin__ = 102;
            n_obs2 = int(0);
            stan::math::fill(n_obs2, std::numeric_limits<int>::min());
            stan::math::assign(n_obs2,count_n_mono(dose_2, dose_1, n_obs, pstream__));
            current_statement_begin__ = 104;
            validate_non_negative_index("srt_idx", "2", 2);
            validate_non_negative_index("srt_idx", "n_obs", n_obs);
            srt_idx = std::vector<std::vector<int> >(2, std::vector<int>(n_obs, int(0)));
            stan::math::fill(srt_idx, std::numeric_limits<int>::min());
            stan::math::assign(srt_idx,sort_idx(dose_1, dose_2, n_obs, n_obs1, n_obs2, pstream__));
            current_statement_begin__ = 106;
            validate_non_negative_index("n_srt", "n_obs", n_obs);
            n_srt = std::vector<int>(n_obs, int(0));
            stan::math::fill(n_srt, std::numeric_limits<int>::min());
            stan::math::assign(n_srt,stan::model::rvalue(n, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(srt_idx, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, n_obs), stan::model::nil_index_list())), "srt_idx")), stan::model::nil_index_list()), "n"));
            current_statement_begin__ = 107;
            validate_non_negative_index("r_srt", "n_obs", n_obs);
            r_srt = std::vector<int>(n_obs, int(0));
            stan::math::fill(r_srt, std::numeric_limits<int>::min());
            stan::math::assign(r_srt,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(srt_idx, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, n_obs), stan::model::nil_index_list())), "srt_idx")), stan::model::nil_index_list()), "r"));
            current_statement_begin__ = 108;
            validate_non_negative_index("s_srt", "n_obs", n_obs);
            s_srt = std::vector<int>(n_obs, int(0));
            stan::math::fill(s_srt, std::numeric_limits<int>::min());
            stan::math::assign(s_srt,stan::model::rvalue(s, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(srt_idx, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, n_obs), stan::model::nil_index_list())), "srt_idx")), stan::model::nil_index_list()), "s"));
            current_statement_begin__ = 110;
            validate_non_negative_index("dose_1_srt", "n_obs", n_obs);
            dose_1_srt = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            stan::math::fill(dose_1_srt, DUMMY_VAR__);
            stan::math::assign(dose_1_srt,divide(stan::model::rvalue(dose_1, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(srt_idx, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, n_obs), stan::model::nil_index_list())), "srt_idx")), stan::model::nil_index_list()), "dose_1"), get_base1(dose_c, 1, "dose_c", 1)));
            current_statement_begin__ = 111;
            validate_non_negative_index("dose_2_srt", "n_obs", n_obs);
            dose_2_srt = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            stan::math::fill(dose_2_srt, DUMMY_VAR__);
            stan::math::assign(dose_2_srt,divide(stan::model::rvalue(dose_2, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(srt_idx, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, n_obs), stan::model::nil_index_list())), "srt_idx")), stan::model::nil_index_list()), "dose_2"), get_base1(dose_c, 2, "dose_c", 1)));
            current_statement_begin__ = 112;
            validate_non_negative_index("ldose_1_srt", "n_obs", n_obs);
            ldose_1_srt = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            stan::math::fill(ldose_1_srt, DUMMY_VAR__);
            stan::math::assign(ldose_1_srt,stan::math::log(dose_1_srt));
            current_statement_begin__ = 113;
            validate_non_negative_index("ldose_2_srt", "n_obs", n_obs);
            ldose_2_srt = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            stan::math::fill(ldose_2_srt, DUMMY_VAR__);
            stan::math::assign(ldose_2_srt,stan::math::log(dose_2_srt));
            // execute transformed data statements
            // validate transformed data
            current_statement_begin__ = 99;
            check_greater_or_equal(function__, "num_s", num_s, 1);
            current_statement_begin__ = 101;
            check_greater_or_equal(function__, "n_obs1", n_obs1, 0);
            check_less_or_equal(function__, "n_obs1", n_obs1, n_obs);
            current_statement_begin__ = 102;
            check_greater_or_equal(function__, "n_obs2", n_obs2, 0);
            check_less_or_equal(function__, "n_obs2", n_obs2, n_obs);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 118;
            num_params_r__ += 1;
            current_statement_begin__ = 119;
            num_params_r__ += 1;
            current_statement_begin__ = 120;
            num_params_r__ += 1;
            current_statement_begin__ = 121;
            num_params_r__ += 1;
            current_statement_begin__ = 122;
            num_params_r__ += 1;
            current_statement_begin__ = 124;
            num_params_r__ += 1;
            current_statement_begin__ = 125;
            num_params_r__ += 1;
            current_statement_begin__ = 131;
            validate_non_negative_index("log_ab_raw", "num_s", num_s);
            validate_non_negative_index("log_ab_raw", "5", 5);
            num_params_r__ += (num_s * 5);
            current_statement_begin__ = 133;
            validate_non_negative_index("mu_raw", "5", 5);
            num_params_r__ += (1 * 5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_jointBLRM() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 118;
        if (!(context__.contains_r("tau_1a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_1a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_1a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_1a", "double", context__.to_vec());
        double tau_1a(0);
        tau_1a = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_1a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_1a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("tau_1b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_1b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_1b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_1b", "double", context__.to_vec());
        double tau_1b(0);
        tau_1b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_1b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_1b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 120;
        if (!(context__.contains_r("tau_2a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_2a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_2a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_2a", "double", context__.to_vec());
        double tau_2a(0);
        tau_2a = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_2a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_2a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 121;
        if (!(context__.contains_r("tau_2b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_2b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_2b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_2b", "double", context__.to_vec());
        double tau_2b(0);
        tau_2b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_2b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_2b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 122;
        if (!(context__.contains_r("tau_eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_eta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_eta", "double", context__.to_vec());
        double tau_eta(0);
        tau_eta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 124;
        if (!(context__.contains_r("rho12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho12");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho12", "double", context__.to_vec());
        double rho12(0);
        rho12 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("rho34")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho34 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho34");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho34", "double", context__.to_vec());
        double rho34(0);
        rho34 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho34);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho34: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 131;
        if (!(context__.contains_r("log_ab_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_ab_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_ab_raw");
        pos__ = 0U;
        validate_non_negative_index("log_ab_raw", "num_s", num_s);
        validate_non_negative_index("log_ab_raw", "5", 5);
        context__.validate_dims("parameter initialization", "log_ab_raw", "matrix_d", context__.to_vec(num_s,5));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> log_ab_raw(num_s, 5);
        size_t log_ab_raw_j_2_max__ = 5;
        size_t log_ab_raw_j_1_max__ = num_s;
        for (size_t j_2__ = 0; j_2__ < log_ab_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_ab_raw_j_1_max__; ++j_1__) {
                log_ab_raw(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(log_ab_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_ab_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 133;
        if (!(context__.contains_r("mu_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_raw");
        pos__ = 0U;
        validate_non_negative_index("mu_raw", "5", 5);
        context__.validate_dims("parameter initialization", "mu_raw", "double", context__.to_vec(5));
        std::vector<double> mu_raw(5, double(0));
        size_t mu_raw_k_0_max__ = 5;
        for (size_t k_0__ = 0; k_0__ < mu_raw_k_0_max__; ++k_0__) {
            mu_raw[k_0__] = vals_r__[pos__++];
        }
        size_t mu_raw_i_0_max__ = 5;
        for (size_t i_0__ = 0; i_0__ < mu_raw_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(mu_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 118;
            local_scalar_t__ tau_1a;
            (void) tau_1a;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_1a = in__.scalar_lb_constrain(0, lp__);
            else
                tau_1a = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 119;
            local_scalar_t__ tau_1b;
            (void) tau_1b;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_1b = in__.scalar_lb_constrain(0, lp__);
            else
                tau_1b = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 120;
            local_scalar_t__ tau_2a;
            (void) tau_2a;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_2a = in__.scalar_lb_constrain(0, lp__);
            else
                tau_2a = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 121;
            local_scalar_t__ tau_2b;
            (void) tau_2b;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_2b = in__.scalar_lb_constrain(0, lp__);
            else
                tau_2b = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 122;
            local_scalar_t__ tau_eta;
            (void) tau_eta;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_eta = in__.scalar_lb_constrain(0, lp__);
            else
                tau_eta = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 124;
            local_scalar_t__ rho12;
            (void) rho12;  // dummy to suppress unused var warning
            if (jacobian__)
                rho12 = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho12 = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 125;
            local_scalar_t__ rho34;
            (void) rho34;  // dummy to suppress unused var warning
            if (jacobian__)
                rho34 = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho34 = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 131;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> log_ab_raw;
            (void) log_ab_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                log_ab_raw = in__.matrix_constrain(num_s, 5, lp__);
            else
                log_ab_raw = in__.matrix_constrain(num_s, 5);
            current_statement_begin__ = 133;
            std::vector<local_scalar_t__> mu_raw;
            size_t mu_raw_d_0_max__ = 5;
            mu_raw.reserve(mu_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mu_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mu_raw.push_back(in__.scalar_constrain(lp__));
                else
                    mu_raw.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 136;
            local_scalar_t__ mu_1a;
            (void) mu_1a;  // dummy to suppress unused var warning
            stan::math::initialize(mu_1a, DUMMY_VAR__);
            stan::math::fill(mu_1a, DUMMY_VAR__);
            current_statement_begin__ = 137;
            local_scalar_t__ mu_1b;
            (void) mu_1b;  // dummy to suppress unused var warning
            stan::math::initialize(mu_1b, DUMMY_VAR__);
            stan::math::fill(mu_1b, DUMMY_VAR__);
            current_statement_begin__ = 138;
            local_scalar_t__ mu_2a;
            (void) mu_2a;  // dummy to suppress unused var warning
            stan::math::initialize(mu_2a, DUMMY_VAR__);
            stan::math::fill(mu_2a, DUMMY_VAR__);
            current_statement_begin__ = 139;
            local_scalar_t__ mu_2b;
            (void) mu_2b;  // dummy to suppress unused var warning
            stan::math::initialize(mu_2b, DUMMY_VAR__);
            stan::math::fill(mu_2b, DUMMY_VAR__);
            current_statement_begin__ = 140;
            local_scalar_t__ mu_eta;
            (void) mu_eta;  // dummy to suppress unused var warning
            stan::math::initialize(mu_eta, DUMMY_VAR__);
            stan::math::fill(mu_eta, DUMMY_VAR__);
            current_statement_begin__ = 141;
            validate_non_negative_index("log_ab", "num_s", num_s);
            validate_non_negative_index("log_ab", "5", 5);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> log_ab(num_s, 5);
            stan::math::initialize(log_ab, DUMMY_VAR__);
            stan::math::fill(log_ab, DUMMY_VAR__);
            current_statement_begin__ = 142;
            validate_non_negative_index("p_srt", "n_obs", n_obs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_srt(n_obs);
            stan::math::initialize(p_srt, DUMMY_VAR__);
            stan::math::fill(p_srt, DUMMY_VAR__);
            current_statement_begin__ = 143;
            validate_non_negative_index("p_2", "((n_obs - n_obs1) - n_obs2)", ((n_obs - n_obs1) - n_obs2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_2(((n_obs - n_obs1) - n_obs2));
            stan::math::initialize(p_2, DUMMY_VAR__);
            stan::math::fill(p_2, DUMMY_VAR__);
            current_statement_begin__ = 144;
            validate_non_negative_index("p_1", "((n_obs - n_obs1) - n_obs2)", ((n_obs - n_obs1) - n_obs2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_1(((n_obs - n_obs1) - n_obs2));
            stan::math::initialize(p_1, DUMMY_VAR__);
            stan::math::fill(p_1, DUMMY_VAR__);
            current_statement_begin__ = 145;
            validate_non_negative_index("p_0", "((n_obs - n_obs1) - n_obs2)", ((n_obs - n_obs1) - n_obs2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_0(((n_obs - n_obs1) - n_obs2));
            stan::math::initialize(p_0, DUMMY_VAR__);
            stan::math::fill(p_0, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 148;
            stan::math::assign(mu_1a, (get_base1(mean_mu, 1, "mean_mu", 1) + (get_base1(sd_mu, 1, "sd_mu", 1) * get_base1(mu_raw, 1, "mu_raw", 1))));
            current_statement_begin__ = 149;
            stan::math::assign(mu_1b, (get_base1(mean_mu, 2, "mean_mu", 1) + (get_base1(sd_mu, 2, "sd_mu", 1) * get_base1(mu_raw, 2, "mu_raw", 1))));
            current_statement_begin__ = 150;
            stan::math::assign(mu_2a, (get_base1(mean_mu, 3, "mean_mu", 1) + (get_base1(sd_mu, 3, "sd_mu", 1) * get_base1(mu_raw, 3, "mu_raw", 1))));
            current_statement_begin__ = 151;
            stan::math::assign(mu_2b, (get_base1(mean_mu, 4, "mean_mu", 1) + (get_base1(sd_mu, 4, "sd_mu", 1) * get_base1(mu_raw, 4, "mu_raw", 1))));
            current_statement_begin__ = 152;
            stan::math::assign(mu_eta, (get_base1(mean_mu, 5, "mean_mu", 1) + (get_base1(sd_mu, 5, "sd_mu", 1) * get_base1(mu_raw, 5, "mu_raw", 1))));
            current_statement_begin__ = 168;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        add(mu_1a, multiply(tau_1a, stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 169;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        add(add(mu_1b, multiply((tau_1b * rho12), stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "log_ab_raw"))), multiply((tau_1b * stan::math::sqrt((1 - square(rho12)))), stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 171;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        add(mu_2a, multiply(tau_2a, stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 172;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                        add(add(mu_2b, multiply((tau_2b * rho34), stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "log_ab_raw"))), multiply((tau_2b * stan::math::sqrt((1 - square(rho34)))), stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 174;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                        add(mu_eta, multiply(tau_eta, stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 177;
            if (as_bool(logical_gt(n_obs1, 0))) {
                current_statement_begin__ = 179;
                stan::model::assign(p_srt, 
                            stan::model::cons_list(stan::model::index_min_max(1, n_obs1), stan::model::nil_index_list()), 
                            inv_logit(add(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(1, n_obs1), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "log_ab"), elt_multiply(stan::math::exp(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(1, n_obs1), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "log_ab")), stan::model::rvalue(ldose_1_srt, stan::model::cons_list(stan::model::index_min_max(1, n_obs1), stan::model::nil_index_list()), "ldose_1_srt")))), 
                            "assigning variable p_srt");
            }
            current_statement_begin__ = 183;
            if (as_bool(logical_gt(n_obs2, 0))) {
                current_statement_begin__ = 185;
                stan::model::assign(p_srt, 
                            stan::model::cons_list(stan::model::index_min_max((n_obs1 + 1), (n_obs1 + n_obs2)), stan::model::nil_index_list()), 
                            inv_logit(add(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max((n_obs1 + 1), (n_obs1 + n_obs2)), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "log_ab"), elt_multiply(stan::math::exp(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max((n_obs1 + 1), (n_obs1 + n_obs2)), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "log_ab")), stan::model::rvalue(ldose_2_srt, stan::model::cons_list(stan::model::index_min_max((n_obs1 + 1), (n_obs1 + n_obs2)), stan::model::nil_index_list()), "ldose_2_srt")))), 
                            "assigning variable p_srt");
            }
            current_statement_begin__ = 190;
            if (as_bool(logical_gt(((n_obs - n_obs1) - n_obs2), 0))) {
                current_statement_begin__ = 192;
                stan::model::assign(p_2, 
                            stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), 
                            inv_logit(add(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "log_ab"), elt_multiply(stan::math::exp(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "log_ab")), stan::model::rvalue(ldose_2_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "ldose_2_srt")))), 
                            "assigning variable p_2");
                current_statement_begin__ = 196;
                stan::model::assign(p_1, 
                            stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), 
                            inv_logit(add(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "log_ab"), elt_multiply(stan::math::exp(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "log_ab")), stan::model::rvalue(ldose_1_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "ldose_1_srt")))), 
                            "assigning variable p_1");
                current_statement_begin__ = 200;
                stan::model::assign(p_0, 
                            stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), 
                            subtract(add(stan::model::rvalue(p_1, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_1"), stan::model::rvalue(p_2, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_2")), elt_multiply(stan::model::rvalue(p_1, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_1"), stan::model::rvalue(p_2, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_2"))), 
                            "assigning variable p_0");
                current_statement_begin__ = 204;
                if (as_bool(saturating)) {
                    current_statement_begin__ = 205;
                    stan::model::assign(p_srt, 
                                stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), 
                                inv_logit(add(logit(stan::model::rvalue(p_0, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_0")), elt_divide(elt_multiply(multiply(2, stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "log_ab")), elt_multiply(stan::model::rvalue(dose_1_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_1_srt"), stan::model::rvalue(dose_2_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_2_srt"))), add(1, elt_multiply(stan::model::rvalue(dose_1_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_1_srt"), stan::model::rvalue(dose_2_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_2_srt")))))), 
                                "assigning variable p_srt");
                } else {
                    current_statement_begin__ = 214;
                    stan::model::assign(p_srt, 
                                stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), 
                                inv_logit(add(logit(stan::model::rvalue(p_0, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_0")), elt_multiply(elt_multiply(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "log_ab"), stan::model::rvalue(dose_1_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_1_srt")), stan::model::rvalue(dose_2_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_2_srt")))), 
                                "assigning variable p_srt");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 136;
            if (stan::math::is_uninitialized(mu_1a)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu_1a";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_1a: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 137;
            if (stan::math::is_uninitialized(mu_1b)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu_1b";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_1b: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 138;
            if (stan::math::is_uninitialized(mu_2a)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu_2a";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_2a: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 139;
            if (stan::math::is_uninitialized(mu_2b)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu_2b";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_2b: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 140;
            if (stan::math::is_uninitialized(mu_eta)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu_eta";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_eta: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 141;
            size_t log_ab_j_1_max__ = num_s;
            size_t log_ab_j_2_max__ = 5;
            for (size_t j_1__ = 0; j_1__ < log_ab_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < log_ab_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(log_ab(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: log_ab" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_ab: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 142;
            size_t p_srt_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < p_srt_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_srt(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_srt" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_srt: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "p_srt", p_srt, 0);
            check_less_or_equal(function__, "p_srt", p_srt, 1);
            current_statement_begin__ = 143;
            size_t p_2_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_2_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_2(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_2" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "p_2", p_2, 0);
            check_less_or_equal(function__, "p_2", p_2, 1);
            current_statement_begin__ = 144;
            size_t p_1_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "p_1", p_1, 0);
            check_less_or_equal(function__, "p_1", p_1, 1);
            current_statement_begin__ = 145;
            size_t p_0_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "p_0", p_0, 0);
            check_less_or_equal(function__, "p_0", p_0, 1);
            // model body
            current_statement_begin__ = 226;
            lp_accum__.add(std_normal_log<propto__>(mu_raw));
            current_statement_begin__ = 228;
            lp_accum__.add(lognormal_log<propto__>(tau_1a, get_base1(mean_tau, 1, "mean_tau", 1), get_base1(sd_tau, 1, "sd_tau", 1)));
            current_statement_begin__ = 229;
            lp_accum__.add(lognormal_log<propto__>(tau_1b, get_base1(mean_tau, 2, "mean_tau", 1), get_base1(sd_tau, 2, "sd_tau", 1)));
            current_statement_begin__ = 230;
            lp_accum__.add(lognormal_log<propto__>(tau_2a, get_base1(mean_tau, 3, "mean_tau", 1), get_base1(sd_tau, 3, "sd_tau", 1)));
            current_statement_begin__ = 231;
            lp_accum__.add(lognormal_log<propto__>(tau_2b, get_base1(mean_tau, 4, "mean_tau", 1), get_base1(sd_tau, 4, "sd_tau", 1)));
            current_statement_begin__ = 232;
            lp_accum__.add(lognormal_log<propto__>(tau_eta, get_base1(mean_tau, 5, "mean_tau", 1), get_base1(sd_tau, 5, "sd_tau", 1)));
            current_statement_begin__ = 234;
            lp_accum__.add(uniform_log<propto__>(rho12, -(1), 1));
            current_statement_begin__ = 235;
            lp_accum__.add(uniform_log<propto__>(rho34, -(1), 1));
            current_statement_begin__ = 237;
            for (int k = 1; k <= num_s; ++k) {
                current_statement_begin__ = 238;
                lp_accum__.add(std_normal_log<propto__>(stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_min_max(1, 5), stan::model::nil_index_list())), "log_ab_raw")));
            }
            current_statement_begin__ = 241;
            lp_accum__.add(binomial_log<propto__>(r_srt, n_srt, p_srt));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("tau_1a");
        names__.push_back("tau_1b");
        names__.push_back("tau_2a");
        names__.push_back("tau_2b");
        names__.push_back("tau_eta");
        names__.push_back("rho12");
        names__.push_back("rho34");
        names__.push_back("log_ab_raw");
        names__.push_back("mu_raw");
        names__.push_back("mu_1a");
        names__.push_back("mu_1b");
        names__.push_back("mu_2a");
        names__.push_back("mu_2b");
        names__.push_back("mu_eta");
        names__.push_back("log_ab");
        names__.push_back("p_srt");
        names__.push_back("p_2");
        names__.push_back("p_1");
        names__.push_back("p_0");
        names__.push_back("p");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_s);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_s);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((n_obs - n_obs1) - n_obs2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((n_obs - n_obs1) - n_obs2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((n_obs - n_obs1) - n_obs2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_jointBLRM_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double tau_1a = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_1a);
        double tau_1b = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_1b);
        double tau_2a = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_2a);
        double tau_2b = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_2b);
        double tau_eta = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_eta);
        double rho12 = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho12);
        double rho34 = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho34);
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> log_ab_raw = in__.matrix_constrain(num_s, 5);
        size_t log_ab_raw_j_2_max__ = 5;
        size_t log_ab_raw_j_1_max__ = num_s;
        for (size_t j_2__ = 0; j_2__ < log_ab_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_ab_raw_j_1_max__; ++j_1__) {
                vars__.push_back(log_ab_raw(j_1__, j_2__));
            }
        }
        std::vector<double> mu_raw;
        size_t mu_raw_d_0_max__ = 5;
        mu_raw.reserve(mu_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mu_raw_d_0_max__; ++d_0__) {
            mu_raw.push_back(in__.scalar_constrain());
        }
        size_t mu_raw_k_0_max__ = 5;
        for (size_t k_0__ = 0; k_0__ < mu_raw_k_0_max__; ++k_0__) {
            vars__.push_back(mu_raw[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 136;
            double mu_1a;
            (void) mu_1a;  // dummy to suppress unused var warning
            stan::math::initialize(mu_1a, DUMMY_VAR__);
            stan::math::fill(mu_1a, DUMMY_VAR__);
            current_statement_begin__ = 137;
            double mu_1b;
            (void) mu_1b;  // dummy to suppress unused var warning
            stan::math::initialize(mu_1b, DUMMY_VAR__);
            stan::math::fill(mu_1b, DUMMY_VAR__);
            current_statement_begin__ = 138;
            double mu_2a;
            (void) mu_2a;  // dummy to suppress unused var warning
            stan::math::initialize(mu_2a, DUMMY_VAR__);
            stan::math::fill(mu_2a, DUMMY_VAR__);
            current_statement_begin__ = 139;
            double mu_2b;
            (void) mu_2b;  // dummy to suppress unused var warning
            stan::math::initialize(mu_2b, DUMMY_VAR__);
            stan::math::fill(mu_2b, DUMMY_VAR__);
            current_statement_begin__ = 140;
            double mu_eta;
            (void) mu_eta;  // dummy to suppress unused var warning
            stan::math::initialize(mu_eta, DUMMY_VAR__);
            stan::math::fill(mu_eta, DUMMY_VAR__);
            current_statement_begin__ = 141;
            validate_non_negative_index("log_ab", "num_s", num_s);
            validate_non_negative_index("log_ab", "5", 5);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> log_ab(num_s, 5);
            stan::math::initialize(log_ab, DUMMY_VAR__);
            stan::math::fill(log_ab, DUMMY_VAR__);
            current_statement_begin__ = 142;
            validate_non_negative_index("p_srt", "n_obs", n_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_srt(n_obs);
            stan::math::initialize(p_srt, DUMMY_VAR__);
            stan::math::fill(p_srt, DUMMY_VAR__);
            current_statement_begin__ = 143;
            validate_non_negative_index("p_2", "((n_obs - n_obs1) - n_obs2)", ((n_obs - n_obs1) - n_obs2));
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_2(((n_obs - n_obs1) - n_obs2));
            stan::math::initialize(p_2, DUMMY_VAR__);
            stan::math::fill(p_2, DUMMY_VAR__);
            current_statement_begin__ = 144;
            validate_non_negative_index("p_1", "((n_obs - n_obs1) - n_obs2)", ((n_obs - n_obs1) - n_obs2));
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_1(((n_obs - n_obs1) - n_obs2));
            stan::math::initialize(p_1, DUMMY_VAR__);
            stan::math::fill(p_1, DUMMY_VAR__);
            current_statement_begin__ = 145;
            validate_non_negative_index("p_0", "((n_obs - n_obs1) - n_obs2)", ((n_obs - n_obs1) - n_obs2));
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_0(((n_obs - n_obs1) - n_obs2));
            stan::math::initialize(p_0, DUMMY_VAR__);
            stan::math::fill(p_0, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 148;
            stan::math::assign(mu_1a, (get_base1(mean_mu, 1, "mean_mu", 1) + (get_base1(sd_mu, 1, "sd_mu", 1) * get_base1(mu_raw, 1, "mu_raw", 1))));
            current_statement_begin__ = 149;
            stan::math::assign(mu_1b, (get_base1(mean_mu, 2, "mean_mu", 1) + (get_base1(sd_mu, 2, "sd_mu", 1) * get_base1(mu_raw, 2, "mu_raw", 1))));
            current_statement_begin__ = 150;
            stan::math::assign(mu_2a, (get_base1(mean_mu, 3, "mean_mu", 1) + (get_base1(sd_mu, 3, "sd_mu", 1) * get_base1(mu_raw, 3, "mu_raw", 1))));
            current_statement_begin__ = 151;
            stan::math::assign(mu_2b, (get_base1(mean_mu, 4, "mean_mu", 1) + (get_base1(sd_mu, 4, "sd_mu", 1) * get_base1(mu_raw, 4, "mu_raw", 1))));
            current_statement_begin__ = 152;
            stan::math::assign(mu_eta, (get_base1(mean_mu, 5, "mean_mu", 1) + (get_base1(sd_mu, 5, "sd_mu", 1) * get_base1(mu_raw, 5, "mu_raw", 1))));
            current_statement_begin__ = 168;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        add(mu_1a, multiply(tau_1a, stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 169;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        add(add(mu_1b, multiply((tau_1b * rho12), stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "log_ab_raw"))), multiply((tau_1b * stan::math::sqrt((1 - square(rho12)))), stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 171;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        add(mu_2a, multiply(tau_2a, stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 172;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                        add(add(mu_2b, multiply((tau_2b * rho34), stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "log_ab_raw"))), multiply((tau_2b * stan::math::sqrt((1 - square(rho34)))), stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 174;
            stan::model::assign(log_ab, 
                        stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                        add(mu_eta, multiply(tau_eta, stan::model::rvalue(log_ab_raw, stan::model::cons_list(stan::model::index_min_max(1, num_s), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "log_ab_raw"))), 
                        "assigning variable log_ab");
            current_statement_begin__ = 177;
            if (as_bool(logical_gt(n_obs1, 0))) {
                current_statement_begin__ = 179;
                stan::model::assign(p_srt, 
                            stan::model::cons_list(stan::model::index_min_max(1, n_obs1), stan::model::nil_index_list()), 
                            inv_logit(add(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(1, n_obs1), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "log_ab"), elt_multiply(stan::math::exp(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(1, n_obs1), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "log_ab")), stan::model::rvalue(ldose_1_srt, stan::model::cons_list(stan::model::index_min_max(1, n_obs1), stan::model::nil_index_list()), "ldose_1_srt")))), 
                            "assigning variable p_srt");
            }
            current_statement_begin__ = 183;
            if (as_bool(logical_gt(n_obs2, 0))) {
                current_statement_begin__ = 185;
                stan::model::assign(p_srt, 
                            stan::model::cons_list(stan::model::index_min_max((n_obs1 + 1), (n_obs1 + n_obs2)), stan::model::nil_index_list()), 
                            inv_logit(add(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max((n_obs1 + 1), (n_obs1 + n_obs2)), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "log_ab"), elt_multiply(stan::math::exp(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max((n_obs1 + 1), (n_obs1 + n_obs2)), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "log_ab")), stan::model::rvalue(ldose_2_srt, stan::model::cons_list(stan::model::index_min_max((n_obs1 + 1), (n_obs1 + n_obs2)), stan::model::nil_index_list()), "ldose_2_srt")))), 
                            "assigning variable p_srt");
            }
            current_statement_begin__ = 190;
            if (as_bool(logical_gt(((n_obs - n_obs1) - n_obs2), 0))) {
                current_statement_begin__ = 192;
                stan::model::assign(p_2, 
                            stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), 
                            inv_logit(add(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "log_ab"), elt_multiply(stan::math::exp(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "log_ab")), stan::model::rvalue(ldose_2_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "ldose_2_srt")))), 
                            "assigning variable p_2");
                current_statement_begin__ = 196;
                stan::model::assign(p_1, 
                            stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), 
                            inv_logit(add(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "log_ab"), elt_multiply(stan::math::exp(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "log_ab")), stan::model::rvalue(ldose_1_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "ldose_1_srt")))), 
                            "assigning variable p_1");
                current_statement_begin__ = 200;
                stan::model::assign(p_0, 
                            stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), 
                            subtract(add(stan::model::rvalue(p_1, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_1"), stan::model::rvalue(p_2, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_2")), elt_multiply(stan::model::rvalue(p_1, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_1"), stan::model::rvalue(p_2, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_2"))), 
                            "assigning variable p_0");
                current_statement_begin__ = 204;
                if (as_bool(saturating)) {
                    current_statement_begin__ = 205;
                    stan::model::assign(p_srt, 
                                stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), 
                                inv_logit(add(logit(stan::model::rvalue(p_0, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_0")), elt_divide(elt_multiply(multiply(2, stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "log_ab")), elt_multiply(stan::model::rvalue(dose_1_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_1_srt"), stan::model::rvalue(dose_2_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_2_srt"))), add(1, elt_multiply(stan::model::rvalue(dose_1_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_1_srt"), stan::model::rvalue(dose_2_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_2_srt")))))), 
                                "assigning variable p_srt");
                } else {
                    current_statement_begin__ = 214;
                    stan::model::assign(p_srt, 
                                stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), 
                                inv_logit(add(logit(stan::model::rvalue(p_0, stan::model::cons_list(stan::model::index_min_max(1, ((n_obs - n_obs1) - n_obs2)), stan::model::nil_index_list()), "p_0")), elt_multiply(elt_multiply(stan::model::rvalue(log_ab, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(s_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "s_srt")), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "log_ab"), stan::model::rvalue(dose_1_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_1_srt")), stan::model::rvalue(dose_2_srt, stan::model::cons_list(stan::model::index_min_max(((n_obs1 + n_obs2) + 1), n_obs), stan::model::nil_index_list()), "dose_2_srt")))), 
                                "assigning variable p_srt");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 142;
            check_greater_or_equal(function__, "p_srt", p_srt, 0);
            check_less_or_equal(function__, "p_srt", p_srt, 1);
            current_statement_begin__ = 143;
            check_greater_or_equal(function__, "p_2", p_2, 0);
            check_less_or_equal(function__, "p_2", p_2, 1);
            current_statement_begin__ = 144;
            check_greater_or_equal(function__, "p_1", p_1, 0);
            check_less_or_equal(function__, "p_1", p_1, 1);
            current_statement_begin__ = 145;
            check_greater_or_equal(function__, "p_0", p_0, 0);
            check_less_or_equal(function__, "p_0", p_0, 1);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(mu_1a);
                vars__.push_back(mu_1b);
                vars__.push_back(mu_2a);
                vars__.push_back(mu_2b);
                vars__.push_back(mu_eta);
                size_t log_ab_j_2_max__ = 5;
                size_t log_ab_j_1_max__ = num_s;
                for (size_t j_2__ = 0; j_2__ < log_ab_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < log_ab_j_1_max__; ++j_1__) {
                        vars__.push_back(log_ab(j_1__, j_2__));
                    }
                }
                size_t p_srt_j_1_max__ = n_obs;
                for (size_t j_1__ = 0; j_1__ < p_srt_j_1_max__; ++j_1__) {
                    vars__.push_back(p_srt(j_1__));
                }
                size_t p_2_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
                for (size_t j_1__ = 0; j_1__ < p_2_j_1_max__; ++j_1__) {
                    vars__.push_back(p_2(j_1__));
                }
                size_t p_1_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
                for (size_t j_1__ = 0; j_1__ < p_1_j_1_max__; ++j_1__) {
                    vars__.push_back(p_1(j_1__));
                }
                size_t p_0_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
                for (size_t j_1__ = 0; j_1__ < p_0_j_1_max__; ++j_1__) {
                    vars__.push_back(p_0(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 246;
            validate_non_negative_index("p", "n_obs", n_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p(n_obs);
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            stan::math::assign(p,stan::model::rvalue(p_srt, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(srt_idx, stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_min_max(1, n_obs), stan::model::nil_index_list())), "srt_idx")), stan::model::nil_index_list()), "p_srt"));
            // validate, write generated quantities
            current_statement_begin__ = 246;
            check_greater_or_equal(function__, "p", p, 0);
            check_less_or_equal(function__, "p", p, 1);
            size_t p_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                vars__.push_back(p(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_jointBLRM";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_1a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_1b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_2a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_2b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_eta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho34";
        param_names__.push_back(param_name_stream__.str());
        size_t log_ab_raw_j_2_max__ = 5;
        size_t log_ab_raw_j_1_max__ = num_s;
        for (size_t j_2__ = 0; j_2__ < log_ab_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_ab_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_ab_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_raw_k_0_max__ = 5;
        for (size_t k_0__ = 0; k_0__ < mu_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_1a";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_1b";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_2a";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_2b";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_eta";
            param_names__.push_back(param_name_stream__.str());
            size_t log_ab_j_2_max__ = 5;
            size_t log_ab_j_1_max__ = num_s;
            for (size_t j_2__ = 0; j_2__ < log_ab_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < log_ab_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_ab" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_srt_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < p_srt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_srt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_2_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_1_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_0_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t p_j_1_max__ = n_obs;
        for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_1a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_1b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_2a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_2b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_eta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho34";
        param_names__.push_back(param_name_stream__.str());
        size_t log_ab_raw_j_2_max__ = 5;
        size_t log_ab_raw_j_1_max__ = num_s;
        for (size_t j_2__ = 0; j_2__ < log_ab_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_ab_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_ab_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_raw_k_0_max__ = 5;
        for (size_t k_0__ = 0; k_0__ < mu_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_1a";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_1b";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_2a";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_2b";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_eta";
            param_names__.push_back(param_name_stream__.str());
            size_t log_ab_j_2_max__ = 5;
            size_t log_ab_j_1_max__ = num_s;
            for (size_t j_2__ = 0; j_2__ < log_ab_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < log_ab_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_ab" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_srt_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < p_srt_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_srt" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_2_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_1_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_0_j_1_max__ = ((n_obs - n_obs1) - n_obs2);
            for (size_t j_1__ = 0; j_1__ < p_0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t p_j_1_max__ = n_obs;
        for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_jointBLRM_namespace::model_jointBLRM stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
